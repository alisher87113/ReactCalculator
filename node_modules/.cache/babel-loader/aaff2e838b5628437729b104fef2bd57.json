{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\calculator\\\\src\\\\context\\\\MyProvider.js\";\nimport React, { Component } from 'react';\nimport MyContext from './MyContext';\n\nclass Provider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      currentInput: 0,\n      prevInput: null,\n      method: null\n    };\n\n    this.handleClick = symbol => {\n      const {\n        currentInput\n      } = this.state;\n      const intSymbol = Number(symbol);\n      console.log(intSymbol);\n      console.log(currentInput.length); //handling Numbers and dot\n\n      if (!isNaN(intSymbol) || symbol === '.') {\n        if (currentInput === 0 || currentInput.length <= 8) {\n          if (symbol === '.') {\n            if (currentInput === 0 || currentInput.indexOf('.') === -1) {\n              this.setState({\n                currentInput: currentInput + symbol\n              });\n            }\n          } else if (currentInput === 0) {\n            this.setState({\n              currentInput: symbol\n            });\n          } else if (currentInput !== 0) {\n            this.setState({\n              currentInput: currentInput + symbol\n            });\n          }\n        }\n      } //handling methods\n      else if (isNaN(intSymbol)) {\n          console.log('pp');\n        }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(MyContext.Provider, {\n      value: {\n        state: this.state,\n        handleClick: sym => this.handleClick(sym)\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 7\n      }\n    }, this.props.children);\n  }\n\n}\n\nexport default Provider;","map":{"version":3,"sources":["C:/Users/user/calculator/src/context/MyProvider.js"],"names":["React","Component","MyContext","Provider","state","currentInput","prevInput","method","handleClick","symbol","intSymbol","Number","console","log","length","isNaN","indexOf","setState","render","sym","props","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AAEA,MAAMC,QAAN,SAAuBF,SAAvB,CAAiC;AAAA;AAAA;AAAA,SAC/BG,KAD+B,GACvB;AACNC,MAAAA,YAAY,EAAE,CADR;AAENC,MAAAA,SAAS,EAAE,IAFL;AAGNC,MAAAA,MAAM,EAAE;AAHF,KADuB;;AAAA,SAO/BC,WAP+B,GAOhBC,MAAD,IAAY;AACxB,YAAM;AAAEJ,QAAAA;AAAF,UAAmB,KAAKD,KAA9B;AACA,YAAMM,SAAS,GAAGC,MAAM,CAACF,MAAD,CAAxB;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAYH,SAAZ;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYR,YAAY,CAACS,MAAzB,EAJwB,CAKxB;;AACA,UAAI,CAACC,KAAK,CAACL,SAAD,CAAN,IAAqBD,MAAM,KAAK,GAApC,EAAyC;AACvC,YAAIJ,YAAY,KAAK,CAAjB,IAAsBA,YAAY,CAACS,MAAb,IAAuB,CAAjD,EAAoD;AAClD,cAAIL,MAAM,KAAK,GAAf,EAAoB;AAClB,gBAAIJ,YAAY,KAAK,CAAjB,IAAsBA,YAAY,CAACW,OAAb,CAAqB,GAArB,MAA8B,CAAC,CAAzD,EAA4D;AAC1D,mBAAKC,QAAL,CAAc;AAAEZ,gBAAAA,YAAY,EAAEA,YAAY,GAAGI;AAA/B,eAAd;AACD;AACF,WAJD,MAIO,IAAIJ,YAAY,KAAK,CAArB,EAAwB;AAC7B,iBAAKY,QAAL,CAAc;AAAEZ,cAAAA,YAAY,EAAEI;AAAhB,aAAd;AACD,WAFM,MAEA,IAAIJ,YAAY,KAAK,CAArB,EAAwB;AAC7B,iBAAKY,QAAL,CAAc;AAAEZ,cAAAA,YAAY,EAAEA,YAAY,GAAGI;AAA/B,aAAd;AACD;AACF;AACF,OAZD,CAaA;AAbA,WAcK,IAAIM,KAAK,CAACL,SAAD,CAAT,EAAsB;AACzBE,UAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACD;AACF,KA9B8B;AAAA;;AAgC/BK,EAAAA,MAAM,GAAG;AACP,wBACE,oBAAC,SAAD,CAAW,QAAX;AACE,MAAA,KAAK,EAAE;AACLd,QAAAA,KAAK,EAAE,KAAKA,KADP;AAELI,QAAAA,WAAW,EAAGW,GAAD,IAAS,KAAKX,WAAL,CAAiBW,GAAjB;AAFjB,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMG,KAAKC,KAAL,CAAWC,QANd,CADF;AAUD;;AA3C8B;;AA6CjC,eAAelB,QAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport MyContext from './MyContext';\r\n\r\nclass Provider extends Component {\r\n  state = {\r\n    currentInput: 0,\r\n    prevInput: null,\r\n    method: null,\r\n  };\r\n\r\n  handleClick = (symbol) => {\r\n    const { currentInput } = this.state;\r\n    const intSymbol = Number(symbol);\r\n    console.log(intSymbol);\r\n    console.log(currentInput.length);\r\n    //handling Numbers and dot\r\n    if (!isNaN(intSymbol) || symbol === '.') {\r\n      if (currentInput === 0 || currentInput.length <= 8) {\r\n        if (symbol === '.') {\r\n          if (currentInput === 0 || currentInput.indexOf('.') === -1) {\r\n            this.setState({ currentInput: currentInput + symbol });\r\n          }\r\n        } else if (currentInput === 0) {\r\n          this.setState({ currentInput: symbol });\r\n        } else if (currentInput !== 0) {\r\n          this.setState({ currentInput: currentInput + symbol });\r\n        }\r\n      }\r\n    }\r\n    //handling methods\r\n    else if (isNaN(intSymbol)) {\r\n      console.log('pp');\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <MyContext.Provider\r\n        value={{\r\n          state: this.state,\r\n          handleClick: (sym) => this.handleClick(sym),\r\n        }}\r\n      >\r\n        {this.props.children}\r\n      </MyContext.Provider>\r\n    );\r\n  }\r\n}\r\nexport default Provider;\r\n"]},"metadata":{},"sourceType":"module"}