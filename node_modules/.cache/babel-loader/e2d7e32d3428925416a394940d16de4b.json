{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\calculator\\\\src\\\\context\\\\MyProvider.js\";\nimport React, { Component } from 'react';\nimport MyContext from './MyContext';\n\nclass Provider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      currentInput: 0,\n      prevInput: null,\n      method: null,\n      //Property that lets browser know that input shows previous calculation result\n      showingResult: false\n    };\n\n    this.setStateMethod = method => {\n      this.setState({\n        prevInput: this.state.currentInput\n      });\n      this.setState({\n        method: method\n      });\n      this.setState({\n        currentInput: 0\n      });\n    };\n\n    this.evaluate = () => {\n      if (this.state.method === '+') {\n        this.setState({\n          currentInput: Number(this.state.currentInput) + Number(this.state.prevInput)\n        });\n      } else if (this.state.method === '-') {\n        this.setState({\n          currentInput: Number(this.state.prevInput) - Number(this.state.currentInput)\n        });\n      } else if (this.state.method === '/') {\n        this.setState({\n          currentInput: Number(this.state.prevInput) / Number(this.state.currentInput)\n        });\n      } else if (this.state.method === '*') {\n        this.setState({\n          currentInput: Number(this.state.currentInput) * Number(this.state.prevInput)\n        });\n      }\n\n      this.setState({\n        showingResult: true\n      });\n    };\n\n    this.checkSymbol = symbol => {\n      const {\n        currentInput\n      } = this.state;\n      const intSymbol = Number(symbol); //handling Numbers and dot\n\n      if (!isNaN(intSymbol) || symbol === '.') {\n        if (currentInput === 0 || currentInput.length <= 8) {\n          if (symbol === '.') {\n            if (currentInput === 0 || currentInput.indexOf('.') === -1) {\n              this.setState({\n                currentInput: currentInput + symbol\n              });\n            }\n          } else if (currentInput === 0) {\n            this.setState({\n              currentInput: symbol\n            });\n          } else if (currentInput !== 0) {\n            this.setState({\n              currentInput: currentInput + symbol\n            });\n          }\n        }\n      } //handling methods\n      else if (isNaN(intSymbol)) {\n          if (symbol === 'C') {\n            this.setState({\n              currentInput: 0\n            });\n            this.setState({\n              prevInput: null\n            });\n            this.setState({\n              method: null\n            });\n          } else if (symbol === '+') {\n            this.setStateMethod('+');\n          } else if (symbol === '–') {\n            this.setStateMethod('-');\n          } else if (symbol === '✕') {\n            this.setStateMethod('*');\n          } else if (symbol === '÷') {\n            this.setStateMethod('/');\n          } else if (symbol === '=') {\n            this.evaluate();\n          }\n        }\n    };\n\n    this.handleClick = symbol => {\n      if (this.state.showingResult) {\n        this.setState({\n          currentInput: 0\n        });\n        this.setState({\n          showingResult: false\n        });\n        this.checkSymbol(symbol);\n        console.log(this.state.currentInput);\n      } else {\n        this.checkSymbol(symbol);\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(MyContext.Provider, {\n      value: {\n        state: this.state,\n        handleClick: sym => this.handleClick(sym)\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 7\n      }\n    }, this.props.children);\n  }\n\n}\n\nexport default Provider;","map":{"version":3,"sources":["C:/Users/user/calculator/src/context/MyProvider.js"],"names":["React","Component","MyContext","Provider","state","currentInput","prevInput","method","showingResult","setStateMethod","setState","evaluate","Number","checkSymbol","symbol","intSymbol","isNaN","length","indexOf","handleClick","console","log","render","sym","props","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AAEA,MAAMC,QAAN,SAAuBF,SAAvB,CAAiC;AAAA;AAAA;AAAA,SAC/BG,KAD+B,GACvB;AACNC,MAAAA,YAAY,EAAE,CADR;AAENC,MAAAA,SAAS,EAAE,IAFL;AAGNC,MAAAA,MAAM,EAAE,IAHF;AAIN;AACAC,MAAAA,aAAa,EAAE;AALT,KADuB;;AAAA,SAU/BC,cAV+B,GAUbF,MAAD,IAAY;AAC3B,WAAKG,QAAL,CAAc;AAAEJ,QAAAA,SAAS,EAAE,KAAKF,KAAL,CAAWC;AAAxB,OAAd;AACA,WAAKK,QAAL,CAAc;AAAEH,QAAAA,MAAM,EAAEA;AAAV,OAAd;AACA,WAAKG,QAAL,CAAc;AAAEL,QAAAA,YAAY,EAAE;AAAhB,OAAd;AACD,KAd8B;;AAAA,SAe/BM,QAf+B,GAepB,MAAM;AACf,UAAI,KAAKP,KAAL,CAAWG,MAAX,KAAsB,GAA1B,EAA+B;AAC7B,aAAKG,QAAL,CAAc;AACZL,UAAAA,YAAY,EACVO,MAAM,CAAC,KAAKR,KAAL,CAAWC,YAAZ,CAAN,GAAkCO,MAAM,CAAC,KAAKR,KAAL,CAAWE,SAAZ;AAF9B,SAAd;AAID,OALD,MAKO,IAAI,KAAKF,KAAL,CAAWG,MAAX,KAAsB,GAA1B,EAA+B;AACpC,aAAKG,QAAL,CAAc;AACZL,UAAAA,YAAY,EACVO,MAAM,CAAC,KAAKR,KAAL,CAAWE,SAAZ,CAAN,GAA+BM,MAAM,CAAC,KAAKR,KAAL,CAAWC,YAAZ;AAF3B,SAAd;AAID,OALM,MAKA,IAAI,KAAKD,KAAL,CAAWG,MAAX,KAAsB,GAA1B,EAA+B;AACpC,aAAKG,QAAL,CAAc;AACZL,UAAAA,YAAY,EACVO,MAAM,CAAC,KAAKR,KAAL,CAAWE,SAAZ,CAAN,GAA+BM,MAAM,CAAC,KAAKR,KAAL,CAAWC,YAAZ;AAF3B,SAAd;AAID,OALM,MAKA,IAAI,KAAKD,KAAL,CAAWG,MAAX,KAAsB,GAA1B,EAA+B;AACpC,aAAKG,QAAL,CAAc;AACZL,UAAAA,YAAY,EACVO,MAAM,CAAC,KAAKR,KAAL,CAAWC,YAAZ,CAAN,GAAkCO,MAAM,CAAC,KAAKR,KAAL,CAAWE,SAAZ;AAF9B,SAAd;AAID;;AACD,WAAKI,QAAL,CAAc;AAAEF,QAAAA,aAAa,EAAE;AAAjB,OAAd;AACD,KAtC8B;;AAAA,SAwC/BK,WAxC+B,GAwChBC,MAAD,IAAY;AACxB,YAAM;AAAET,QAAAA;AAAF,UAAmB,KAAKD,KAA9B;AACA,YAAMW,SAAS,GAAGH,MAAM,CAACE,MAAD,CAAxB,CAFwB,CAGxB;;AACA,UAAI,CAACE,KAAK,CAACD,SAAD,CAAN,IAAqBD,MAAM,KAAK,GAApC,EAAyC;AACvC,YAAIT,YAAY,KAAK,CAAjB,IAAsBA,YAAY,CAACY,MAAb,IAAuB,CAAjD,EAAoD;AAClD,cAAIH,MAAM,KAAK,GAAf,EAAoB;AAClB,gBAAIT,YAAY,KAAK,CAAjB,IAAsBA,YAAY,CAACa,OAAb,CAAqB,GAArB,MAA8B,CAAC,CAAzD,EAA4D;AAC1D,mBAAKR,QAAL,CAAc;AAAEL,gBAAAA,YAAY,EAAEA,YAAY,GAAGS;AAA/B,eAAd;AACD;AACF,WAJD,MAIO,IAAIT,YAAY,KAAK,CAArB,EAAwB;AAC7B,iBAAKK,QAAL,CAAc;AAAEL,cAAAA,YAAY,EAAES;AAAhB,aAAd;AACD,WAFM,MAEA,IAAIT,YAAY,KAAK,CAArB,EAAwB;AAC7B,iBAAKK,QAAL,CAAc;AAAEL,cAAAA,YAAY,EAAEA,YAAY,GAAGS;AAA/B,aAAd;AACD;AACF;AACF,OAZD,CAaA;AAbA,WAcK,IAAIE,KAAK,CAACD,SAAD,CAAT,EAAsB;AACzB,cAAID,MAAM,KAAK,GAAf,EAAoB;AAClB,iBAAKJ,QAAL,CAAc;AAAEL,cAAAA,YAAY,EAAE;AAAhB,aAAd;AACA,iBAAKK,QAAL,CAAc;AAAEJ,cAAAA,SAAS,EAAE;AAAb,aAAd;AACA,iBAAKI,QAAL,CAAc;AAAEH,cAAAA,MAAM,EAAE;AAAV,aAAd;AACD,WAJD,MAIO,IAAIO,MAAM,KAAK,GAAf,EAAoB;AACzB,iBAAKL,cAAL,CAAoB,GAApB;AACD,WAFM,MAEA,IAAIK,MAAM,KAAK,GAAf,EAAoB;AACzB,iBAAKL,cAAL,CAAoB,GAApB;AACD,WAFM,MAEA,IAAIK,MAAM,KAAK,GAAf,EAAoB;AACzB,iBAAKL,cAAL,CAAoB,GAApB;AACD,WAFM,MAEA,IAAIK,MAAM,KAAK,GAAf,EAAoB;AACzB,iBAAKL,cAAL,CAAoB,GAApB;AACD,WAFM,MAEA,IAAIK,MAAM,KAAK,GAAf,EAAoB;AACzB,iBAAKH,QAAL;AACD;AACF;AACF,KA3E8B;;AAAA,SA6E/BQ,WA7E+B,GA6EhBL,MAAD,IAAY;AACxB,UAAI,KAAKV,KAAL,CAAWI,aAAf,EAA8B;AAC5B,aAAKE,QAAL,CAAc;AAAEL,UAAAA,YAAY,EAAE;AAAhB,SAAd;AACA,aAAKK,QAAL,CAAc;AAAEF,UAAAA,aAAa,EAAE;AAAjB,SAAd;AACA,aAAKK,WAAL,CAAiBC,MAAjB;AACAM,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAKjB,KAAL,CAAWC,YAAvB;AACD,OALD,MAKO;AACL,aAAKQ,WAAL,CAAiBC,MAAjB;AACD;AACF,KAtF8B;AAAA;;AAwF/BQ,EAAAA,MAAM,GAAG;AACP,wBACE,oBAAC,SAAD,CAAW,QAAX;AACE,MAAA,KAAK,EAAE;AACLlB,QAAAA,KAAK,EAAE,KAAKA,KADP;AAELe,QAAAA,WAAW,EAAGI,GAAD,IAAS,KAAKJ,WAAL,CAAiBI,GAAjB;AAFjB,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMG,KAAKC,KAAL,CAAWC,QANd,CADF;AAUD;;AAnG8B;;AAqGjC,eAAetB,QAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport MyContext from './MyContext';\r\n\r\nclass Provider extends Component {\r\n  state = {\r\n    currentInput: 0,\r\n    prevInput: null,\r\n    method: null,\r\n    //Property that lets browser know that input shows previous calculation result\r\n    showingResult: false,\r\n  };\r\n\r\n  //method to copy current input into prevInput clean up current input\r\n  setStateMethod = (method) => {\r\n    this.setState({ prevInput: this.state.currentInput });\r\n    this.setState({ method: method });\r\n    this.setState({ currentInput: 0 });\r\n  };\r\n  evaluate = () => {\r\n    if (this.state.method === '+') {\r\n      this.setState({\r\n        currentInput:\r\n          Number(this.state.currentInput) + Number(this.state.prevInput),\r\n      });\r\n    } else if (this.state.method === '-') {\r\n      this.setState({\r\n        currentInput:\r\n          Number(this.state.prevInput) - Number(this.state.currentInput),\r\n      });\r\n    } else if (this.state.method === '/') {\r\n      this.setState({\r\n        currentInput:\r\n          Number(this.state.prevInput) / Number(this.state.currentInput),\r\n      });\r\n    } else if (this.state.method === '*') {\r\n      this.setState({\r\n        currentInput:\r\n          Number(this.state.currentInput) * Number(this.state.prevInput),\r\n      });\r\n    }\r\n    this.setState({ showingResult: true });\r\n  };\r\n\r\n  checkSymbol = (symbol) => {\r\n    const { currentInput } = this.state;\r\n    const intSymbol = Number(symbol);\r\n    //handling Numbers and dot\r\n    if (!isNaN(intSymbol) || symbol === '.') {\r\n      if (currentInput === 0 || currentInput.length <= 8) {\r\n        if (symbol === '.') {\r\n          if (currentInput === 0 || currentInput.indexOf('.') === -1) {\r\n            this.setState({ currentInput: currentInput + symbol });\r\n          }\r\n        } else if (currentInput === 0) {\r\n          this.setState({ currentInput: symbol });\r\n        } else if (currentInput !== 0) {\r\n          this.setState({ currentInput: currentInput + symbol });\r\n        }\r\n      }\r\n    }\r\n    //handling methods\r\n    else if (isNaN(intSymbol)) {\r\n      if (symbol === 'C') {\r\n        this.setState({ currentInput: 0 });\r\n        this.setState({ prevInput: null });\r\n        this.setState({ method: null });\r\n      } else if (symbol === '+') {\r\n        this.setStateMethod('+');\r\n      } else if (symbol === '–') {\r\n        this.setStateMethod('-');\r\n      } else if (symbol === '✕') {\r\n        this.setStateMethod('*');\r\n      } else if (symbol === '÷') {\r\n        this.setStateMethod('/');\r\n      } else if (symbol === '=') {\r\n        this.evaluate();\r\n      }\r\n    }\r\n  };\r\n\r\n  handleClick = (symbol) => {\r\n    if (this.state.showingResult) {\r\n      this.setState({ currentInput: 0 });\r\n      this.setState({ showingResult: false });\r\n      this.checkSymbol(symbol);\r\n      console.log(this.state.currentInput);\r\n    } else {\r\n      this.checkSymbol(symbol);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <MyContext.Provider\r\n        value={{\r\n          state: this.state,\r\n          handleClick: (sym) => this.handleClick(sym),\r\n        }}\r\n      >\r\n        {this.props.children}\r\n      </MyContext.Provider>\r\n    );\r\n  }\r\n}\r\nexport default Provider;\r\n"]},"metadata":{},"sourceType":"module"}